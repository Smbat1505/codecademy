Промисы — это объекты JavaScript, представляющие конечный результат асинхронной операции.
Обещания могут находиться в одном из трех состояний: ожидание, решение или отклонение.
Обещание считается выполненным, если оно либо разрешено, либо отклонено.
Мы создаем обещание, используя newключевое слово и передавая функцию-исполнитель Promiseметоду конструктора.
setTimeout()— это функция Node, которая задерживает выполнение функции обратного вызова с помощью цикла обработки событий.
Мы используем .then()обратный вызов обработчика успеха, содержащий логику того, что должно произойти, если промис разрешается.
Мы используем .catch()обратный вызов обработчика сбоя, содержащий логику того, что должно произойти, если обещание отклонено.
Композиция промисов позволяет нам писать сложный асинхронный код, который по-прежнему читаем. Мы делаем это, соединяя несколько .then()'и .catch()'.
Чтобы правильно использовать композицию промисов, мы должны помнить, что returnпромисы, созданные в файле .then().
Мы должны связывать несколько промисов, а не вкладывать их друг в друга.
Чтобы воспользоваться параллелизмом, мы можем использовать Promise.all().